//local bus = 2;
//local bitsToMatch = 2; //0x2;
//local bitsToIgnore = 0; //0x0;
//local bigendian = false;


// CAN receive handle
//local receiveHandle = CanComms.RxOpenStandard(bus, bitsToMatch, bitsToIgnore, bigendian);
local receiveHandle = CanComms.RxOpenStandard(2, 0x2, 0x0, false);
// Receive CAN message.
local bitOffset = 64;
local bitLength = 0;
if (CanComms.RxMessage(receiveHandle)){
	// Get Register ID
	WheelSpeed = 20;
	bitLength = 8;
	bitOffset = bitOffset - bitLength; // bitOffset = 56;
	RegID = CanComms.GetUnsignedInteger(receiveHandle,56,8);

	if (RegID eq 0x40){
		// Status map
		bitLength = 16;
		bitOffset = bitOffset - bitLength;
		Received.RHSStatMapReceived = CanComms.GetInteger(receiveHandle,40,16);
	}
	if (RegID eq Received.EWMap.Register) {
		// Error-warning map
		bitLength = 32;
		bitOffset = bitOffset - bitLength;
		Received.EWMap = CanComms.GetInteger(receiveHandle,24,32) ;
	} 
	if (RegID eq 0x90) {
		// Torque
		bitLength = 16;
		bitOffset = bitOffset - bitLength;
		Received.RHSTorqueReceived = CanComms.GetInteger(receiveHandle,40,16) ;
	} 
	if (RegID eq 0x30) {
		// RPM 
		bitLength = 16;
		bitOffset = bitOffset - bitLength;
		Received.RPMReceived = - CanComms.GetInteger(receiveHandle,40,16) * 6000 / 32768;
		// WheelSpeed = 3.6 * Received.RPMReceived * (2.0*3.1416/60.0) * (11.0/38.0) * 0.231;
	} 
	if (RegID eq 0x20){
		// Actual Current (formula from CAN manual)
		bitLength = 16;
		bitOffset = bitOffset - bitLength;
		local readValue = CanComms.GetInteger(receiveHandle,40,16);
		// InverterCurrent = -2/10 * 2000 * readValue / 1070;
		InverterCurrent = -readValue * 0.3738;
	} 
	if (RegID eq 0x27) {
		// Iq_actual
		bitLength = 16;
		bitOffset = bitOffset - bitLength;
		Received.IqReceived = CanComms.GetInteger(receiveHandle,40,16);
	} 
	if (RegID eq 0x49) {
		// T_Motor (Motor temperature)
		bitLength = 16;
		bitOffset = bitOffset - bitLength;
		Received.TMotorReceived = CanComms.GetInteger(receiveHandle,40,16);
	} 
	if (RegID eq 0x4a) {
		// T_IGBT (Output stage temperature)
		bitLength = 16;
		bitOffset = bitOffset - bitLength;
		Received.TIgbtReceived = CanComms.GetInteger(receiveHandle,40,16);
	}		
}