// CAN receive handle
local receiveHandle = CanComms.RxOpenStandard(CAN.Bus, CAN.InverterTxID, CAN.BitsToIgnore, false);


// Receive CAN message
if (CanComms.RxMessage(receiveHandle)) {
	local bitLength = 0;
	local bitOffset = 56;  //  64 - 8 = 56

	// Get Register ID
	RegID = CanComms.GetUnsignedInteger(receiveHandle, bitOffset, RegID.BitLength);
	CAN.RxStatus = Rx Status.Ok;
	
	// Compare RegID with known registers
	if (RegID eq Data.StatusMap.Register) {
		bitLength = Data.StatusMap.BitLength;
		bitOffset = bitOffset - bitLength;
		Data.StatusMap = CanComms.GetInteger(receiveHandle, bitOffset, bitLength);
		Status.UpdateStatus(Data.StatusMap);
	}
	
	else if (RegID eq Data.EWMap.Register) {
		bitLength = Data.EWMap.BitLength;
		bitOffset = bitOffset - bitLength;
		Data.EWMap = CanComms.GetInteger(receiveHandle, bitOffset, bitLength);
		Status.UpdateEW(Data.EWMap);
	} 
	
	else if (RegID eq TorqueCmd.Register) {
		bitLength = TorqueCmd.BitLength;
		bitOffset = bitOffset - bitLength;
		TorqueCmd.Received = CanComms.GetInteger(receiveHandle, bitOffset, bitLength);
		TorqueCmd.RxStatus = Rx Status.Ok;
	}
	
	else if (RegID eq Data.TorqueOut.Register) {
		bitLength = Data.TorqueOut.BitLength;
		bitOffset = bitOffset - bitLength;
		Data.TorqueOut.Raw = CanComms.GetInteger(receiveHandle, bitOffset, bitLength);
		Data.TorqueOut.Update();
	}
	
	else if (RegID eq Data.RPM.Register) {
		bitLength = Data.RPM.BitLength;
		bitOffset = bitOffset - bitLength;
		Data.RPM.Raw = CanComms.GetInteger(receiveHandle, bitOffset, bitLength); 
		Data.RPM.Update();
	} 
	
	else if (RegID eq Data.CurrentAC.Register){
		bitLength = Data.CurrentAC.BitLength;
		bitOffset = bitOffset - bitLength;
		Data.CurrentAC.Raw = CanComms.GetInteger(receiveHandle, bitOffset, bitLength); 
		Data.CurrentAC.Update();
	}
	
	else if (RegID eq Data.IqActual.Register) {
		bitLength = Data.IqActual.BitLength;
		bitOffset = bitOffset - bitLength;
		Data.IqActual.Raw = CanComms.GetInteger(receiveHandle, bitOffset, bitLength); 
	}
	
	else if (RegID eq Data.IMaxPk.Register) {
		bitLength = Data.IMaxPk.BitLength;
		bitOffset = bitOffset - bitLength;
		Data.IMaxPk.Raw = CanComms.GetInteger(receiveHandle, bitOffset, bitLength); 
	}  
	
	else if (RegID eq Data.TempMotor.Register) {
		bitLength = Data.TempMotor.BitLength;
		bitOffset = bitOffset - bitLength;
		Data.TempMotor.Raw = CanComms.GetInteger(receiveHandle, bitOffset, bitLength); 
	} 
	
	else if (RegID eq Data.TempIGBT.Register) {
		bitLength = Data.TempIGBT.BitLength;
		bitOffset = bitOffset - bitLength;
		Data.TempIGBT.Raw = CanComms.GetInteger(receiveHandle, bitOffset, bitLength); 
	}
	
	else if (RegID eq Data.IMaxPk.Register) {
		bitLength = Data.IMaxPk.BitLength;
		bitOffset = bitOffset - bitLength;
		Data.IMaxPk.Raw = CanComms.GetInteger(receiveHandle, bitOffset, bitLength); 
	}
	
	else if (RegID eq Data.VoltageDC.Register) {
		bitLength = Data.VoltageDC.BitLength;
		bitOffset = bitOffset - bitLength;
		Data.VoltageDC.Raw = CanComms.GetInteger(receiveHandle, bitOffset, bitLength);
		Data.VoltageDC.Update();
	}
	
} else {
	CAN.RxStatus = Rx Status.Waiting;
}	
