// CAN receive handle
local receiveHandle = CanComms.RxOpenStandard(CAN.Bus, CAN.InverterTxID, CAN.BitsToIgnore, false);


// Receive CAN message
if (CanComms.RxMessage(receiveHandle)) {
	local bitLength = 0;
	local bitOffset = 56;  //  64 - 8 = 56
	
	MessagesReceived = 1;
	
	// Get Register ID
	RegID = CanComms.GetUnsignedInteger(receiveHandle, bitOffset, RegID.BitLength);
	
	// Compare RegID with known registers
	if (RegID eq Data.StatusMap.Register) {
		bitLength = Data.StatusMap.BitLength;
		bitOffset = bitOffset - bitLength;
		Data.StatusMap.Raw = CanComms.GetInteger(receiveHandle, bitOffset, bitLength);
	}
	
	else if (RegID eq Data.EWMap.Register) {
		bitLength = Data.EWMap.BitLength;
		bitOffset = bitOffset - bitLength;
		Data.EWMap.Raw = CanComms.GetInteger(receiveHandle, bitOffset, bitLength);
	} 
	
	else if (RegID eq Data.TorqueCommand.Register) {
		bitLength = Data.TorqueCommand.BitLength;
		bitOffset = bitOffset - bitLength;
		Data.TorqueCommand.Raw = CanComms.GetInteger(receiveHandle, bitOffset, bitLength);
	}
	
	else if (RegID eq Data.RPM.Register) {
		bitLength = Data.RPM.BitLength;
		bitOffset = bitOffset - bitLength;
		Data.RPM.Raw = CanComms.GetInteger(receiveHandle, bitOffset, bitLength); 
		Data.RPM.Mapped = - Data.RPM.Raw * 6000 / 32768;
		Data.WheelSpeed = 3.6 * Data.RPM.Raw * (2.0*3.1416/60.0) * (11.0/38.0) * 0.231;
	} 
	
	else if (RegID eq Data.InverterCurrent.Register){
		bitLength = Data.InverterCurrent.BitLength;
		bitOffset = bitOffset - bitLength;
		Data.InverterCurrent.Raw = CanComms.GetInteger(receiveHandle, bitOffset, bitLength); 
		// Data.InverterCurrent.Raw = -2/10 * 2000 * readValue / 1070; (formula from CAN manual)
		Data.InverterCurrent.Actual = -Data.InverterCurrent.Raw * 0.3738;
	} 
	
	else if (RegID eq Data.IqActual.Register) {
		bitLength = Data.IqActual.BitLength;
		bitOffset = bitOffset - bitLength;
		Data.IqActual.Raw = CanComms.GetInteger(receiveHandle, bitOffset, bitLength); 
	} 
	
	else if (RegID eq Data.TempMotor.Register) {
		bitLength = Data.TempMotor.BitLength;
		bitOffset = bitOffset - bitLength;
		Data.TempMotor.Raw = CanComms.GetInteger(receiveHandle, bitOffset, bitLength); 
	} 
	
	else if (RegID eq Data.TempIGBT.Register) {
		bitLength = Data.TempIGBT.BitLength;
		bitOffset = bitOffset - bitLength;
		Data.TempIGBT.Raw = CanComms.GetInteger(receiveHandle, bitOffset, bitLength); 
	}		
}
